# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_test_zapas.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json

import requests
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtWidgets import QSizePolicy

from sql_app.schemas import CreateNotes, PutNotes


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1151, 832)
        # MainWindow.setMinimumSize()
        MainWindow.setMinimumSize(1151, 832)
        MainWindow.setMaximumSize(1151, 832)
        MainWindow.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 0, 2, 2))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(0, 0, 1151, 811))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox_3 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget2.setGeometry(QtCore.QRect(30, 30, 331, 361))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_27 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_27.setFrameShape(QtWidgets.QFrame.Box)
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.verticalLayout_10.addWidget(self.label_27)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_9.addWidget(self.label_9)
        self.deleteId = QtWidgets.QLineEdit(self.layoutWidget2)
        self.deleteId.setMinimumSize(QtCore.QSize(200, 0))
        self.deleteId.setPlaceholderText('Write "ID" of element')
        self.deleteId.setMaximumSize(QtCore.QSize(200, 16777215))
        self.deleteId.setText("")
        self.deleteId.setObjectName("deleteId")
        self.horizontalLayout_9.addWidget(self.deleteId)
        self.verticalLayout_3.addLayout(self.horizontalLayout_9)
        self.deleteWindow = QtWidgets.QPlainTextEdit(self.layoutWidget2)
        self.deleteWindow.setObjectName("deleteWindow")
        self.verticalLayout_3.addWidget(self.deleteWindow)
        self.deleteButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.deleteButton.setObjectName("deleteButton")
        self.verticalLayout_3.addWidget(self.deleteButton)
        self.verticalLayout_10.addLayout(self.verticalLayout_3)
        self.horizontalLayout_6.addWidget(self.groupBox_3)
        self.groupBox_2 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget3 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget3.setGeometry(QtCore.QRect(60, 30, 271, 361))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.label_28 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_28.setFrameShape(QtWidgets.QFrame.Box)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.verticalLayout_11.addWidget(self.label_28)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_5.addWidget(self.label_5)
        self.detailId = QtWidgets.QLineEdit(self.layoutWidget3)
        self.detailId.setMinimumSize(QtCore.QSize(200, 0))
        self.detailId.setPlaceholderText('Write "ID" of element')
        self.detailId.setMaximumSize(QtCore.QSize(200, 16777215))
        self.detailId.setText("")
        self.detailId.setObjectName("detailId")
        self.horizontalLayout_5.addWidget(self.detailId)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.detailWindow = QtWidgets.QPlainTextEdit(self.layoutWidget3)
        self.detailWindow.setObjectName("detailWindow")
        self.verticalLayout_2.addWidget(self.detailWindow)
        self.getDetailButton = QtWidgets.QPushButton(self.layoutWidget3)
        self.getDetailButton.setObjectName("getDetailButton")
        self.verticalLayout_2.addWidget(self.getDetailButton)
        self.verticalLayout_11.addLayout(self.verticalLayout_2)
        self.horizontalLayout_6.addWidget(self.groupBox_2)
        self.groupBox_4 = QtWidgets.QGroupBox(self.layoutWidget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.layoutWidget4 = QtWidgets.QWidget(self.groupBox_4)
        self.layoutWidget4.setGeometry(QtCore.QRect(20, 30, 321, 361))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.layoutWidget4)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.label_29 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_29.setFrameShape(QtWidgets.QFrame.Box)
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.verticalLayout_13.addWidget(self.label_29)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_10 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_10.addWidget(self.label_10)
        self.putId = QtWidgets.QLineEdit(self.layoutWidget4)
        self.putId.setMinimumSize(QtCore.QSize(200, 0))
        self.putId.setPlaceholderText('Write "ID" of element')
        self.putId.setMaximumSize(QtCore.QSize(200, 16777215))
        self.putId.setText("")
        self.putId.setObjectName("putId")
        self.horizontalLayout_10.addWidget(self.putId)
        self.verticalLayout_4.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_11 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_11.addWidget(self.label_11)
        self.putStatus = QtWidgets.QLineEdit(self.layoutWidget4)
        self.putStatus.setPlaceholderText('Write "status" of element')
        self.putStatus.setMinimumSize(QtCore.QSize(200, 0))
        self.putStatus.setMaximumSize(QtCore.QSize(200, 16777215))
        self.putStatus.setText("")
        self.putStatus.setObjectName("putStatus")
        self.horizontalLayout_11.addWidget(self.putStatus)
        self.verticalLayout_4.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_12 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_12.addWidget(self.label_12)
        self.putImportant = QtWidgets.QCheckBox(self.layoutWidget4)
        self.putImportant.setText("")
        self.putImportant.setTristate(False)
        self.putImportant.setObjectName("putImportant")
        self.horizontalLayout_12.addWidget(self.putImportant)
        self.verticalLayout_4.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_13 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_13.addWidget(self.label_13)
        self.putPublic = QtWidgets.QCheckBox(self.layoutWidget4)
        self.putPublic.setText("")
        self.putPublic.setTristate(False)
        self.putPublic.setObjectName("putPublic")
        self.horizontalLayout_13.addWidget(self.putPublic)
        self.verticalLayout_4.addLayout(self.horizontalLayout_13)
        self.putWindow = QtWidgets.QPlainTextEdit(self.layoutWidget4)
        self.putWindow.setObjectName("putWindow")
        self.verticalLayout_4.addWidget(self.putWindow)
        self.getPutButton = QtWidgets.QPushButton(self.layoutWidget4)
        self.getPutButton.setObjectName("getPutButton")
        self.verticalLayout_4.addWidget(self.getPutButton)
        self.verticalLayout_13.addLayout(self.verticalLayout_4)
        self.horizontalLayout_6.addWidget(self.groupBox_4)
        self.verticalLayout_9.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.groupBox_5 = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox_5.setMinimumSize(QtCore.QSize(0, 1))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setAccessibleName("")
        self.groupBox_5.setTitle("")
        self.groupBox_5.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_5.setFlat(False)
        self.groupBox_5.setCheckable(False)
        self.groupBox_5.setObjectName("groupBox_5")
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox.setGeometry(QtCore.QRect(580, 0, 570, 399))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget5 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget5.setGeometry(QtCore.QRect(30, 30, 311, 361))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.layoutWidget5)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_31 = QtWidgets.QLabel(self.layoutWidget5)
        self.label_31.setFrameShape(QtWidgets.QFrame.Box)
        self.label_31.setAlignment(QtCore.Qt.AlignCenter)
        self.label_31.setObjectName("label_31")
        self.verticalLayout_15.addWidget(self.label_31)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget5)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget5)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget5)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.listImportant = QtWidgets.QCheckBox(self.layoutWidget5)
        self.listImportant.setText("")
        self.listImportant.setTristate(False)
        self.listImportant.setObjectName("listImportant")
        self.horizontalLayout_3.addWidget(self.listImportant)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget5)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.listPublic = QtWidgets.QCheckBox(self.layoutWidget5)
        self.listPublic.setText("")
        self.listPublic.setTristate(False)
        self.listPublic.setObjectName("listPublic")
        self.horizontalLayout_4.addWidget(self.listPublic)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        # self.listWindow = QtWidgets.QScrollArea(self.layoutWidget5)

        self.listWindow = QtWidgets.QPlainTextEdit(self.layoutWidget5)
        self.listWindow.setObjectName("listWindow")
        self.verticalLayout_4.addWidget(self.listWindow)

        # self.listWindow.setWidgetResizable(True)

        self.verticalLayout.addWidget(self.listWindow)
        self.getListButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.getListButton.setObjectName("getListButton")
        self.verticalLayout.addWidget(self.getListButton)
        self.verticalLayout_15.addLayout(self.verticalLayout)
        self.layoutWidget6 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget6.setGeometry(QtCore.QRect(210, 30, 311, 361))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.layoutWidget6)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_30 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_30.setFrameShape(QtWidgets.QFrame.Box)
        self.label_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_30.setObjectName("label_30")
        self.verticalLayout_14.addWidget(self.label_30)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.label_23 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_24.addWidget(self.label_23)
        self.postName = QtWidgets.QLineEdit(self.layoutWidget6)
        self.postName.setPlaceholderText('Write new "Name" of element')
        self.postName.setMinimumSize(QtCore.QSize(200, 0))
        self.postName.setMaximumSize(QtCore.QSize(100, 16777215))
        self.postName.setText("")
        self.postName.setObjectName("postName")
        self.horizontalLayout_24.addWidget(self.postName)
        self.verticalLayout_5.addLayout(self.horizontalLayout_24)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.label_24 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_29.addWidget(self.label_24)
        self.postStatus = QtWidgets.QLineEdit(self.layoutWidget6)
        self.postName.setPlaceholderText('Chose new "Status"(active,delayed,done)')
        self.postStatus.setMinimumSize(QtCore.QSize(200, 0))
        self.postStatus.setMaximumSize(QtCore.QSize(200, 16777215))
        self.postStatus.setText("")
        self.postStatus.setObjectName("postStatus")
        self.postStatus.setPlaceholderText('Write new "Status" of element')
        self.horizontalLayout_29.addWidget(self.postStatus)
        self.verticalLayout_5.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_25 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_26.addWidget(self.label_25)
        self.postPublic = QtWidgets.QCheckBox(self.layoutWidget6)
        self.postPublic.setText("")
        self.postPublic.setTristate(False)
        self.postPublic.setObjectName("postPublic")
        self.horizontalLayout_26.addWidget(self.postPublic)
        self.verticalLayout_5.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.label_26 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_27.addWidget(self.label_26)
        self.postImportant = QtWidgets.QCheckBox(self.layoutWidget6)
        self.postImportant.setText("")
        self.postImportant.setTristate(False)
        self.postImportant.setObjectName("postImportant")
        self.horizontalLayout_27.addWidget(self.postImportant)
        self.verticalLayout_5.addLayout(self.horizontalLayout_27)

        self.postWindow = QtWidgets.QPlainTextEdit(self.layoutWidget6)
        self.postWindow.setObjectName("postWindow")
        self.verticalLayout_5.addWidget(self.postWindow)
        self.getPostButton = QtWidgets.QPushButton(self.layoutWidget6)
        self.getPostButton.setObjectName("getPostButton")
        self.verticalLayout_5.addWidget(self.getPostButton)
        self.verticalLayout_14.addLayout(self.verticalLayout_5)
        self.horizontalLayout_7.addWidget(self.groupBox_5)
        self.verticalLayout_9.addLayout(self.horizontalLayout_7)
        self.layoutWidget7 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget7.setGeometry(QtCore.QRect(0, 0, 2, 2))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.layoutWidget7)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # init signals
        self.getListButton.clicked.connect(self.onListBtnClicked)

        self.getPostButton.clicked.connect(self.onPostBtnClicked)

        self.getDetailButton.clicked.connect(self.onDetailBtnClicked)

        self.deleteButton.clicked.connect(self.onDeleteBtnClicked)

        self.getPutButton.clicked.connect(self.onUpdateBtnClicked)

    # -------------------------------------------------------------------------------------------------
    def onUpdateBtnClicked(self):
        """
        Slot for updating object
        :return: None
        """
        self.clear_window(window=self.putWindow)
        is_important = self.putImportant.isChecked()
        is_public = self.putPublic.isChecked()
        idx = self.putId.text()
        status = self.putStatus.text()

        # ---------------------------------------
        if not status:
            status = None
            pass
        else:
            self.check_instance(field=status,
                                window=self.putWindow,
                                field_name='status')

        is_valid = self.check_instance(field=idx,
                                       window=self.putWindow,
                                       field_name='id',
                                       last_field=True)

        # ---------------------------------------
        if is_valid is False:
            return

        self.clear_window(window=self.putWindow)

        response = self.make_put_request(url='http://127.0.0.1:8000/notice/',
                                         idx=idx,
                                         is_important=is_important,
                                         is_public=is_public,
                                         status=status)

        # ---------------------------------------
        if response is None:
            text = self.id_is_null(idx)
        else:
            text = f'Объект с ID={idx} обновлен'

        text = self.get_result_from_request(response=text)
        self.set_text(window=self.putWindow, text=text)

    # -------------------------------------------------------------------------------------------------
    def onDetailBtnClicked(self):
        """
        Slot for getting detail of object
        :return: None
        """
        self.clear_window(window=self.detailWindow)
        idx = self.detailId.text()

        is_valid = self.check_instance(field=idx,
                                       window=self.detailWindow,
                                       field_name='id',
                                       last_field=True)
        if is_valid is False:
            return

        self.clear_window(window=self.detailWindow)
        response = self.make_detail_request(url='http://127.0.0.1:8000/notice/',
                                            idx=idx)
        text = self.get_result_from_request(response=response)
        if text == 'null':
            text = self.id_is_null(idx)
        self.set_text(window=self.detailWindow, text=text)

    # -------------------------------------------------------------------------------------------------
    def onDeleteBtnClicked(self):
        """
        Slot for deleting object
        :return: None
        """
        self.clear_window(window=self.deleteWindow)
        idx = self.deleteId.text()

        is_valid = self.check_instance(field=idx,
                                       window=self.deleteWindow,
                                       field_name='id',
                                       last_field=True)

        # ---------------------------------------
        if is_valid is False:
            return

        self.clear_window(window=self.deleteWindow)
        response = self.make_delete_request(url='http://127.0.0.1:8000/notice/',
                                            idx=idx)

        # ---------------------------------------
        if response is None:
            response = self.id_is_null(idx)

        text = self.get_result_from_request(response=response)
        self.set_text(window=self.deleteWindow, text=text)

    # -------------------------------------------------------------------------------------------------
    def onListBtnClicked(self):
        """
        Slot for getting list of objects
        :return: None
        """
        is_important = self.listImportant.isChecked()
        is_public = self.listPublic.isChecked()

        self.clear_window(window=self.listWindow)

        if all([is_important is False,
                is_public is False]):
            response = requests.get(f'http://127.0.0.1:8000/notice/')
        elif all([is_important is True,
                  is_public is False]):
            response = self.make_get_request(url='http://127.0.0.1:8000/notice/', is_important=1)
        elif all([is_important is False,
                  is_public is True]):
            response = self.make_get_request(url='http://127.0.0.1:8000/notice/', is_public=1)
        else:
            response = self.make_get_request(url='http://127.0.0.1:8000/notice/', is_public=1, is_important=1)

        text = self.get_result_from_request(response=response)
        self.set_text(window=self.listWindow, text=text)

    # -------------------------------------------------------------------------------------------------
    def onPostBtnClicked(self):
        """
        Slot for creating object
        :return: None
        """
        name = self.postName.text()
        status = self.postStatus.text()
        is_public = self.postPublic.isChecked()
        is_important = self.postImportant.isChecked()

        self.clear_window(window=self.postWindow)

        # ---------------------------------------
        is_valid = self.check_instance(field=status,
                                       window=self.postWindow,
                                       field_name='status',
                                       last_field=True)
        if is_valid is False:
            return

        is_valid = True

        # ---------------------------------------
        if not name and not status:
            self.show_error_message(window=self.postWindow,
                                    text='Поле "status" и "name" должны быть заполнены')
            is_valid = False

        # ---------------------------------------
        if all([len(name) > 0,
                len(status) <= 0]):
            self.show_error_message(window=self.postWindow,
                                    text='Поле "status" должно быть заполнено числом')
            is_valid = False

        # ---------------------------------------
        if all([len(name) <= 0,
                len(status) > 0]):

            is_valid = self.check_instance(field=status,
                                           window=self.postWindow,
                                           field_name='status',
                                           last_field=True)
            if is_valid is False:
                self.show_error_message(window=self.postWindow,
                                        text='Поле "status" должно быть целочисленным числом')

            self.show_error_message(window=self.postWindow,
                                    text='Поле "name" должно быть заполнено')
            is_valid = False

        # ---------------------------------------
        if is_valid is True:
            response = self.make_post_request(url='http://127.0.0.1:8000/notice/',
                                              name=name,
                                              status=status,
                                              is_public=is_public,
                                              is_important=is_important)

            self.clear_window(window=self.postWindow)
            text = self.get_result_from_request(response=response)
            self.set_text(window=self.postWindow, text=text)

    # -------------------------------------------------------------------------------------------------
    def check_instance(self, field, window, field_name, last_field=None) -> None or False:
        """
        Method for checking field
        :param field: test variable
        :param window: window for response
        :param field_name: field for information output
        :param last_field:
        :return: None or False
        """

        if '.' in field:
            self.show_error_message(window=window,
                                    text=f'Поле "{field_name}" должно быть целочисленным числом')

            if last_field is True:
                return False

        # ---------------------------------------
        try:
            int(field)
        except ValueError:
            self.show_error_message(window=window,
                                    text=f'Поле "{field_name}" должно быть целочисленным числом')

            if last_field is True:
                return False

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def make_put_request(url: str, idx: int, **query_param):
        """
        Method for creating delete request to server
        :param url: url of end point
        :param idx: id of object
        :param query_param: keys for pydantic model
        :return: None or object
        """

        dict_data = PutNotes(**query_param).dict()

        result = requests.put(f'{url}{idx}', json=dict_data)

        if result.text == 'null':
            return None

        return result

    # -------------------------------------------------------------------------------------------------
    def id_is_null(self, idx) -> str:
        """
        :param idx: id of object
        :return: string
        """
        return f'Отсутствует элемент по ID = {idx}'

    # -------------------------------------------------------------------------------------------------
    def show_error_message(self, window, text, add_error: str = None) -> None:
        """
        Method for show error message
        :param window: window where we will show error message
        :param text: message
        :param add_error: message
        :return: None
        """
        if add_error is not None:
            text = text + add_error
        self.clear_window(window)
        self.set_text(window, text=text)

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def get_result_from_request(response):
        """
        Method for returning result to window
        :param response: dict data
        :return: python dict
        """
        if isinstance(response, str):
            return response

        if isinstance(response, dict):
            return json.dumps(response, indent=4)

        return json.dumps(response.json(), indent=4)

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def make_delete_request(url: str, idx: int):
        """
        Method for creating delete request to server
        :param url: url of end point
        :param idx: id of object
        :return: None or object
        """
        result = requests.delete(f'{url}{idx}')
        if result.text == 'null':
            return None
        return result

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def make_detail_request(url: str, idx: int):
        """
        Method for creating detail request to server
        :param url: url of end point
        :param idx: id of object
        :return: object
        """
        result = requests.get(f'{url}{idx}')
        return result

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def make_post_request(url: str, **query_param):
        """
        Method for creating post request to server
        :param url: url of end point
        :param query_param: keys for pydantic model
        :return: object
        """
        dict_data = CreateNotes(**query_param).dict()
        requests.post(url, json=dict_data)
        return dict_data

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def make_get_request(url: str, **query_param: dict):
        """
        Method for creating get request to server
        :param url: url of end point
        :param query_param: keys for pydantic model
        :return: object
        """
        if query_param is None:
            return requests.get(url)
        else:
            if query_param.get('is_important') and query_param.get('is_public'):
                return requests.get(f'{url}?is_important=1&is_public=1')
            if query_param.get('is_important'):
                return requests.get(f'{url}?is_important=1')
            if query_param.get('is_public'):
                return requests.get(f'{url}?is_public=1')

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def clear_window(window) -> None:
        """
        Method for cleaning window from text
        :param window: window where we will clean text
        :return: None
        """
        window.clear()

    # -------------------------------------------------------------------------------------------------
    @staticmethod
    def set_text(window, text: str) -> None:
        """
        Method for put text to certain window
        :param window: window where we will put text
        :param text: text of message
        :return: None
        """
        window.appendPlainText(text)

    # -------------------------------------------------------------------------------------------------
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_27.setText(_translate("MainWindow", "Delete object"))
        self.label_9.setText(_translate("MainWindow", "Item_id"))
        self.deleteButton.setText(_translate("MainWindow", "OK"))
        self.label_28.setText(_translate("MainWindow", "Get detail about element"))
        self.label_5.setText(_translate("MainWindow", "Item_id"))
        self.getDetailButton.setText(_translate("MainWindow", "OK"))
        self.label_29.setText(_translate("MainWindow", "Put"))
        self.label_10.setText(_translate("MainWindow", "Item_id"))
        self.label_11.setText(_translate("MainWindow", "status "))
        self.label_12.setText(_translate("MainWindow", "is_important"))
        self.label_13.setText(_translate("MainWindow", "is_public"))
        self.getPutButton.setText(_translate("MainWindow", "OK"))
        self.label_31.setText(_translate("MainWindow", "Get list"))
        self.label_3.setText(_translate("MainWindow", "is_important"))
        self.label_4.setText(_translate("MainWindow", "is_public"))
        self.getListButton.setText(_translate("MainWindow", "OK"))
        self.label_30.setText(_translate("MainWindow", "Post"))
        self.label_23.setText(_translate("MainWindow", "name"))
        self.label_24.setText(_translate("MainWindow", "status "))
        self.label_25.setText(_translate("MainWindow", "is_public"))
        self.label_26.setText(_translate("MainWindow", "is_important"))
        self.getPostButton.setText(_translate("MainWindow", "OK"))


# -------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
